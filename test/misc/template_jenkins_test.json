{

  "variables" : {
    "AWS_ACCESS_KEY_ID"  : "",
    "AWS_SECRET_KEY"  : "",
    "vpc" : "vpc-010f9f66",
    "subnet" : "subnet-df749296",
    "security_group" : "sg-a6c4e2d9",
    "region" : "us-east-1",
    "availability_zone" : "us-east-1a",
    "instance_type": "t2.large",
    "temporary_key_pair_name" : "GIWindowsAMI_Test",
    "iam_profile" : "WinAMI-IAM-Role"
  },

  "min_packer_version" : "0.12.0",

    "builders": [
      {
        "type": "amazon-ebs",

        "access_key" : "{{user `AWS_ACCESS_KEY_ID`}}",
        "secret_key" : "{{user `AWS_SECRET_KEY`}}",

        "region": "{{user `region`}}",
        "vpc_id" : "{{user `vpc`}}",
        "availability_zone" : "{{user `availability_zone`}}",
        "subnet_id" : "{{user `subnet`}}",
        "security_group_id" : "{{user `security_group`}}",
        "associate_public_ip_address" : true,

        "ami_name": "{{isotime \"2006-01-02\"}}-Windows-AP-GOLD",
        "source_ami" :  "",
        "source_ami_filter": {
          "filters": {
            "virtualization-type": "hvm",
            "name": "*Windows_Server-2012-R2_RTM-English-64Bit-Base-*",
            "root-device-type": "ebs"
          },
          "owners": ["801119661308"],
          "most_recent": true
        },

        "instance_type": "t2.large",
        "temporary_key_pair_name" : "{{user `temporary_key_pair_name`}}",
        "launch_block_device_mappings"  : [
          {
              "device_name" : "/dev/sda1",
              "volume_size" : 50,
              "volume_type" : "gp2",
              "delete_on_termination" : true
          }
        ],

        "communicator" : "winrm",
        "winrm_port"  : 5986,
        "winrm_username" : "Administrator",
        "winrm_timeout" : "1h",
        "winrm_use_ssl" : true,
        "winrm_insecure"  : true,

        "ssh_keypair_name"  : "GIWindowsAMI_Test",
        "ssh_private_key_file"  : "keys/GIWindowsAMI_Test.pem",

        "user_data_file" : "userdata/userdata.txt",
        "windows_password_timeout" : "20m",

        "ami_description" : "Windows 2012 R2 Server pre-baked AMI build",

        "run_tags"  : {
          "Name" : "{{isotime \"2006-01-02\"}}-Windows-AP-GOLD",
          "Cost Center" : "N/A",
          "Customer Facing" : "No",
          "Environment" : "Test",
          "Role" : "AMI",
          "Service" : "EC2",
          "Support Team" : "techgssserver@ap.org",
          "OS" : "Windows 2012 R2 STD"
        },

        "ami_users" : [
          "959162376654"

        ],

        "tags"  : {
            "Name" : "{{isotime \"2006-01-02\"}}-Windows-AP-GOLD",
            "Cost Center" : "N/A",
            "Customer Facing" : "No",
            "Environment" : "Test",
            "Role" : "AMI",
            "Service" : "EC2",
            "Support Team" : "techgssserver@ap.org",
            "OS" : "Windows 2012 R2 STD"
          }
        }
  ],

  "_comment"  : "Provision Section",
  "provisioners" : [
    {
      "type"  : "powershell",
      "inline"  : [
        "New-Item -Path C:\\apps -ItemType Directory -Force",
        "$url = 'https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe'",
        "$path = 'c:\\apps\\git-64-bit.exe'",
        "$webclient = new-object System.Net.WebClient",
        "$webclient.DownloadFile( $url, $path )",
        "Start-Sleep 30",
        "Write-Host 'Installing Git'",
        "Start-Sleep -Seconds 15",
        "start-process -FilePath 'c:\\apps\\git-64-bit.exe' -PassThru ''/SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /LOG=C:\\git_log.txt' -Wait | Out-Null"
      ]
    },

    {
      "type" : "powershell",
      "inline" : [
        "Invoke-WebRequest -Uri 'https://s3.amazonaws.com/packer-windows-qa-associatedpressqa-us-east-1-goldami/apps.zip' -OutFile C:\\apps\\apps.zip",
        "#Extract apps.zip file",
        "$shell_app=new-object -com shell.application",
        "$filename = 'apps.zip'",
        "$zip_file = $shell_app.namespace('C:\\apps' + '\\$filename')",
        "$destination = $shell_app.namespace('C:\\apps')",
        "$destination.Copyhere($zip_file.items())",
        "Write-Host 'Installing AWS Command Line Interface'",
        "Start-Process msiexec.exe -ArgumentList '/i C:\\apps\\AWSCLI64.msi /qn /norestart /log C:\\awscli_logs.txt' -Wait -PassThru | Out-Null",
        "Start-Sleep -Seconds 15",
        "Write-Host 'Installing CFN Unicode Fix'",
        "$source = 'https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-win64-latest.msi'",
        "$destination = 'C:\\apps\\aws-cfn-bootstrap-win64-latest.msi'",
        "Invoke-WebRequest -Uri $source -OutFile $destination",
        "Start-Process msiexec.exe -ArgumentList '/i C:\\apps\\aws-cfn-bootstrap-win64-latest.msi /qn /norestart /log C:\\aws-cfn-bootstrap_log.txt' -Wait -PassThru",
        "Write-Host 'Install Puppet Agent'",
        "Start-Process msiexec.exe -ArgumentList '/qn /i C:\\apps\\puppet-agent-x64.msi PUPPET_MASTER_SERVER=badhost.ap.org /log C:\\puppet_logs.txt' -Wait -PassThru | Out-Null",
        "Write-Host 'Installing Altiris CEM Agent'",
        "$ExecuteInstall = {C:\\apps\\CEMInstall.exe /s /pass:Password123!}",
        "Invoke-Command -ScriptBlock $ExecuteInstall | Out-Null",
        "Start-Sleep -Seconds 30",
        "Write-Host 'Installing Notepad++'",
        "$ExecuteInstall = {C:\\apps\\npp.7.3.1.Installer.x64.exe /S}",
        "Start-Sleep -Seconds 30",
        "Write-Host 'Installing Symantec Endpoint Protection'",
        "$ExecuteInstall = {C:\\apps\\setup.exe}",
        "Invoke-Command -ScriptBlock $ExecuteInstall",
        "Write-Host 'Symantec Endpoint Protection installed.' -ForegroundColor Green",
        "Start-Sleep -Seconds 30",
        "Write-Host 'Installing NetTime'",
        "Start-Process -FilePath C:\\apps\\InstallTimeSync.exe -ArgumentList /silent | Out-Null",
        "Start-Sleep -Seconds 30",
        "Write-Host 'Installing AWS-SDK for Ruby'",
        "$ExecuteInstall = {C:\\apps\\gem-aws-sdk.bat}",
        "Invoke-Command -ScriptBlock $ExecuteInstall | Out-Null",
        "Start-Sleep -Seconds 30",
        "Write-Host 'Install KB3134758-x64 - Windows Mgmt Framework 5'",
        "$WU = {Start-Process dism.exe -ArgumentList '/online /add-package /PackagePath:C:\\apps\\WindowsBlue-KB3134758-x64.cab /quiet /norestart' -Wait -PassThru}",
        "Invoke-Command -ScriptBlock $WU | Out-Null",
        "Start-Sleep -Seconds 30"
      ],
      "start_retry_timeout" : "20m"
    },

    {
      "type"  : "powershell",
      "inline" : [
        "Remove-Item -Path C:\\apps\\* -Force -Recurse -ErrorAction SilentlyContinue",
        "Remove-Item -Path C:\\apps",
        "Remove-Item -Path %PROGRAMDATA%\\PuppetLabs\\puppet\\cache\\* -Force -Recurse -ErrorAction SilentlyContinue",
        "Write-Host 'Set Puppet Agent to Manual Startup'",
        "Set-Service -Name puppet -StartupType Manual",
        "Write-Host 'Puppet Agent Service Stopped'",
        "Start-Sleep -Seconds 30",
        "Write-Host 'CEM Client Cleanup'",
        "Stop-Service -Name AeXNSClient -Force",
        "Start-Sleep -Seconds 60",
        "Invoke-Command -ScriptBlock {cmd.exe /c reg.exe delete 'HKLM\\SOFTWARE\\Altiris\\eXpress' /v MachineGuid /f}",
        "Invoke-Command -ScriptBlock {cmd.exe /c reg.exe delete 'HKLM\\SOFTWARE\\Altiris\\eXpress\\NS Client' /v MachineGuid /f}",
        "Invoke-Command -ScriptBlock {cmd.exe /c reg.exe delete 'HKLM\\SOFTWARE\\Altiris\\Altiris Agent' /v MachineGuid /f}",
        "Write-Host 'SEP Client Cleanup'",
        "Invoke-Command -ScriptBlock {& 'C:\\Program Files (x86)\\Symantec\\Symantec Endpoint Protection\\smc.exe' -stop}",
        "Remove-Item -Path 'C:\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Program Files\\Common Files\\Symantec Shared\\HWID\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Documents and Settings\\All Users\\Application Data\\Symantec\\Symantec Endpoint Protection\\CurrentVersion\\Data\\Config\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Documents and Settings\\All Users\\Application Data\\Symantec\\Symantec Endpoint Protection\\PersistedData\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\ProgramData\\Symantec\\Symantec Endpoint Protection\\PersistedData\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Users\\All Users\\Symantec\\Symantec Endpoint Protection\\PersistedData\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Windows\\Temp\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Documents and Settings\\*\\Local Settings\\Temp\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Users\\*\\AppData\\Local\\Temp\\sephwid.xml' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Program Files\\Common Files\\Symantec Shared\\HWID\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Documents and Settings\\All Users\\Application Data\\Symantec\\Symantec Endpoint Protection\\CurrentVersion\\Data\\Config\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Documents and Settings\\All Users\\Application Data\\Symantec\\Symantec Endpoint Protection\\PersistedData\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\ProgramData\\Symantec\\Symantec Endpoint Protection\\PersistedData\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Users\\All Users\\Symantec\\Symantec Endpoint Protection\\PersistedData\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Windows\\Temp\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Documents and Settings\\*\\Local Settings\\Temp\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'C:\\Users\\*\\AppData\\Local\\Temp\\communicator.dat' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Symantec\\Symantec Endpoint Protection\\SMC\\SYLINK\\SyLink\\ForceHardwareKey' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Symantec\\Symantec Endpoint Protection\\SMC\\SYLINK\\SyLink\\HardwareID' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Remove-Item -Path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Symantec\\Symantec Endpoint Protection\\SMC\\SYLINK\\SyLink\\HostGUID' -Force -Confirm:$false -ErrorAction SilentlyContinue",
        "Write-Host 'Begin Sysprep'",
        "$doc = [xml](Get-Content 'C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\config.xml')",
        "$doc.Ec2ConfigurationSettings.Plugins.Plugin[0].State = 'Enabled'",
        "$doc.save('C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\config.xml')",
        "$doc1 = [xml](Get-Content 'C:\\Program Files\\Amazon\\Ec2ConfigService\\sysprep2008.xml')",
        "(($doc1.unattend.settings | Where-Object {$_.pass -eq 'specialize'} | Select-Object -ExpandProperty component) | Where-Object{$_.name -eq 'Microsoft-Windows-Shell-Setup'}).CopyProfile = 'false'",
        "$doc1.save('C:\\Program Files\\Amazon\\Ec2ConfigService\\sysprep2008.xml')",
        "$fileName = 'C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\WallpaperSettings.xml';",
        "$xmlDoc = [System.Xml.XmlDocument](Get-Content $fileName);",
        "$newXmlwp = $xmlDoc.WallpaperSettings.AppendChild($xmlDoc.CreateElement('WallpaperInformation','http://tempuri.org/WallpaperSettings.xsd'))",
        "$newXmlNameElement = $newXmlwp.AppendChild($xmlDoc.CreateElement('name','http://tempuri.org/WallpaperSettings.xsd'));",
        "$newXmlNameTextNode = $newXmlNameElement.AppendChild($xmlDoc.CreateTextNode('AMI-ID'));",
        "$newXmlsoElement = $newXmlwp.AppendChild($xmlDoc.CreateElement('source','http://tempuri.org/WallpaperSettings.xsd'));",
        "$newXmlsoTextNode = $newXmlsoElement.AppendChild($xmlDoc.CreateTextNode('metadata'));",
        "$newXmlidElement = $newXmlwp.AppendChild($xmlDoc.CreateElement('identifier','http://tempuri.org/WallpaperSettings.xsd'));",
        "$newXmlidTextNode = $newXmlidElement.AppendChild($xmlDoc.CreateTextNode('meta-data/ami-id'));",
        "$xmlDoc.Save($fileName)",
        "$fileName = 'C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\WallpaperSettings.xml';",
        "$xmlDoc = [System.Xml.XmlDocument](Get-Content $fileName);",
        "$newXmlwp = $xmlDoc.WallpaperSettings.AppendChild($xmlDoc.CreateElement('WallpaperInformation','http://tempuri.org/WallpaperSettings.xsd'))",
        "$newXmlNameElement = $newXmlwp.AppendChild($xmlDoc.CreateElement('name','http://tempuri.org/WallpaperSettings.xsd'));",
        "$newXmlNameTextNode = $newXmlNameElement.AppendChild($xmlDoc.CreateTextNode('Security Group'));",
        "$newXmlsoElement = $newXmlwp.AppendChild($xmlDoc.CreateElement('source','http://tempuri.org/WallpaperSettings.xsd'));",
        "$newXmlsoTextNode = $newXmlsoElement.AppendChild($xmlDoc.CreateTextNode('metadata'));",
        "$newXmlidElement = $newXmlwp.AppendChild($xmlDoc.CreateElement('identifier','http://tempuri.org/WallpaperSettings.xsd'));",
        "$newXmlidTextNode = $newXmlidElement.AppendChild($xmlDoc.CreateTextNode('meta-data/security-groups'));",
        "$xmlDoc.Save($fileName)",
        "Invoke-Command -ScriptBlock {& 'C:\\Program Files\\Amazon\\Ec2ConfigService\\Ec2WallpaperInfo.exe'}",
        "Write-Host 'Finalize Sysprep'",
        "Start-Sleep -Seconds 20",
        "$awssys = '$env:programFiles\\Amazon\\Ec2ConfigService\\ec2config.exe'",
        "$arguments = '-sysprep'",
        "Start-Process $awssys $arguments"
      ]
    }
  ]
}
